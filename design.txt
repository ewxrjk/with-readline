How with-readline works
=======================

with-readline started from an idea by Tony Finch, but has become quite
complicated.

Many programs enter an interactive mode if their input is a terminal
and a noninteractive mode otherwise.  In such cases with-readline
always wants the interactive mode.  Therefore it makes a
pseudo-terminal to communicate with the command.

It then needs to do the following three things concurrently:

 * monitor the command's output to its terminal, which it sees as
   input on the pty master fd.  It transmits this to its own output
   and records the most recent line to use as the pty.

 * monitor signals, e.g. (at least) SIGWINCH

 * monitor keyboard input and pass it to Readline, possibly
   intercepting some of it (e.g. INTR and QUIT) and passing it
   straight to the command.

Readline insists that its get character callback block if no input is
available (and even using its callback-based interface calls it more
than once per invocation so even though that might be convenient to
use for other reasons does not solve the concurrency problem).
Annoyingly I only discovered this part way through implementation.

The solution is to run the event loop both inside and outside the get
character callback.  If it is inside it then any input characters
(that are not intercepted) must be returned to Readline.  If it is
outside it then it must invoke Readline and arrange for the next call
to return the most recently read character.

This implies:

 * an event loop function which returns either at EOF or when a
   character is available to pass to readline

 * an outer loop which calls the event loop and invokes readline if it
   is told a character is available

 * a get character callback which first invokes the event loop if no
   character is available, and (in any case) returns the character
   read (or EOF indication).

Currently only one character at a time is read from the input.  This
makes it easier intercept special characters.  Readline does this
natively anyway so there's not much of a loss.

The terminal is not put into nonblocking mode.  If it was then
SIGKILL, SIGSTOP or a crash would leave it in nonblocking mode, which
can confuse some callers.

If the terminal is already in nonblocking mode on entry then
with-readline will cope (since it only ever calls read() when select()
indicates there is data to read) and will not change to blocking mode.

Ian Jackson suggested using SIGTTIN to notice when the command was
ready to receive input (see below for more about this).  The advantage
of this would be that input was not echoed at all until the prompt was
printed; type-ahead and INTR/QUIT propagation can still both be made
to work simultaneously by buffering keyboard input and dumping it on
Readline all at once.

So that this can be implemented, characters to return to readline are
stored in an expandable buffer rather than a single-character buffer
(which is all that is needed otherwise).  The outer loop invokes the
event loop if the buffer is empty and readline otherwise.  The get
character callback invokes the event loop until the buffer is nonempty
and then returns the next character in the buffer.

Terminal Settings
=================

Since with-readline wants to select on input at all times, input had
better not be in cooked mode.  So it puts the terminal into raw mode
immediately and deny Readline the chance of changing this off its own
bat.

The psuedo-terminal settings are copied from the caller's terminal,
with the exception that echoing is turned off, so that lines we send
to the command aren't send back to with-readline (they have already
been printed by Readline itself).

Window Size Handling
====================

Mostly this is easy: when our window changes size SIGWINCH is
received.  The new size is queried and pass it on to the command.

The wrinkle is that if our window changes size while the process is
suspended then it doesn't get to see the SIGWINCH (only one process
group gets the signal).  So it needs to make sure this happens after
with-readline is continued too.  It's probably polite to only
propagate the size change if it is indeed changed.

Job Control
===========

Readline normally catches the stop signals and de- and re- configures
the terminal around them.  However as described above it has been
denied the ability to do this.  Also this strategy can't work with
SIGSTOP.  Therefore:

 * SIGCONT should restore terminal settings and check window size

 * the shell is expected to sort out its own terminal settings

Special Keys
============
  
Special keys are handled as follows:

^D is intercepted by Readline.  Normally it means to delete the next
character but it provokes readline() to return NULL if the line is
empty (i.e. to mimic the normal behaviour).  with-readline reacts by
sending the EOF character to the subprocess.  Thus if the subprocess
likes to read beyond EOF, it retains the opportunity to do so.

^C and ^\ is intercepted by with-readline and sent straight to the
subprocess even if it is in the middle of a line.  Possibly it should
also discard the current line?  Usually the point is moot as the
subprocess will terminate.  (The reason for sending them on as
characters is to allow it to retain the same control over these keys
it already had.)

Neither with-readline nor Readline intercept ^Z.  See above regarding
job control.

^U and ^V are used by Readline.

^S and ^Q aren't handled specially.  If we get them then we pass them
on to Readline, if they are processed by the kernel then they have
their usual effect.

Using SIGTTIN
=============

This section is not implemented yet (and may not be, given the
behaviour without seems tolerable).

The desired behaviour is for the child to be able to write at will
(i.e. to not be stopped by SIGTTOU), but to get a SIGTTIN when it
attempts to read.  At that point with-readline knows it must have
printed its prompt (currently it guesses that the user only starts
typing when the prompt appears, which may not be the case).

Ignoring SIGTTOU should cause writes to just succeed: this is
explicitly blessed by POSIX.

However there is a complication that tcsetpgrp() and tcgetpgrp() must
be called with the controlling terminal of the calling process.  Thus
the parent with-readline process cannot be responsible for calling
these functions.

Therefore it is necessary to interpose a "shell" subprocess.  This
will be the session leader.  It will start the command in a new
process group, with SIGTTOU ignored, and will switch the terminal's
foreground process group between itself and its child as necessary.

Initially it will make the terminal's process group be its own process
group.  So when the child reads for the first time it will get
SIGTTIN.  This will be detected by the shell process, which will
report this to the parent process.

When a line is available the shell and with-readline will cooperate to
make the child process group the foreground process group and then
transmit the line to it, before putting it into the background again.
Unanswered question: how do we ensure that the whole line is read
before doing this?  (Perhaps we can find out how much is left unread
in the terminal.)

The same approach is taken for EOFs.

There are two options for detecting termination.  One is for the shell
to hold the slave pty open all the time and terminate when its
immediate child (process group?) does.  The other is to keep it closed
except when it needs to call tcsetpgrp and have the parent
with-readline thus detect termination on the master side of the pty.

All this might not work well with programs that select on standard
input while still generating output.  They are probably not likely to
be good candidates for use with with-readline anyway but it would be
possible to provide a command-line option to suppress the above
behaviour.

References
==========

IEEE Std 1003.1 base definitions chapter 11 "General Terminal Interface"
http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap11.html
